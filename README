Revisions: 2                   Tomcat Playground                    Éric NICOLAS
Latest: 2025-07-30             =================                     René Mazala

                     *Minimal* set-up for exploratory work
                           with a local Tomcat server

Minimal? -----------------------------------------------------------------------

    Sure.  You've never seen a Java project with that few files; hallelujah.

    After you've run it once, you can restart it again in ~1500ms (there's a bit
    of overhead in spawning a JVM and encapsulating all operations in Docker
    containers).  If you change the Java code, it'll add some extra ~3500ms to
    recompile.

    You don't even need Java or Tomcat installed, everything's done in Docker:
    edit your files in vi or whatever, and get experimenting!

        .
        ├── README
        ├── Dockerfile
        ├── server.xml
        ├── start.sh
        ├── test.sh
        ├── pom.xml
        └── src/main/java/org/example
            ├── TestServlet.java
            └── TestServletJavax.java

What me do? --------------------------------------------------------------------

    Just edit the Dockerfile, server.xml and TestServlet.java, then simply run:

        start.sh [debug] ........................ debug ∈ { "debug", undefined }

    It'll compile your Java servlet and serve it in Tomcat.  If "debug" is
    passed, you'll be able to debug remotely against port 5005.

    I want a different environment ......... then edit .............. Dockerfile

        FROM maven:3-eclipse-temurin-17 AS build
        FROM tomcat:11-jre17

    I have some funky Tomcat config ........ then edit .............. server.xml

        <Valve className="org.apache.catalina.valves.RemoteIpValve"
               httpServerPort="8765"
               httpsServerPort="5678" />

    My servlet should make coffee .......... then edit ........ TestServlet.java

        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
            res.setStatus(418); // Close enough.
        }

In the box ---------------------------------------------------------------------

    Right now, it's got two servlets configured, both of which merely reply to
    each incoming HttpServletRequest (GET only) with its headers, as well as
    the output of some interesting methods invoked on it.  They only differ in
    the namespaces they use for Java "enterprise" APIs (Java EE): if you use
    tomcat:10 or later in Dockerfile, then only the one using jakarta will be
    scanned; vice versa if you choose to use tomcat:9 or earlier.

    The server.xml currently comes with a basic RemoteIpValve configured.

    Together, they allow you to explore what'd happen when serving requests
    behind a reverse proxy:

        curl -H host:mercateo.com -H x-forwarded-proto:https 'http://localhost:8080/test?name=eric'

                             ----------- INCOMING HEADERS -----------
                       host: mercateo.com
                 user-agent: curl/8.15.0
                     accept: */*
          x-forwarded-proto: https
                             -------- INTERPRETED PROPERTIES --------
             getRequestURL() https://mercateo.com/test
             getRemoteAddr() 172.17.0.1
             getServerName() mercateo.com
             getServerPort() 443
                 getScheme() https
                  isSecure() true
            getQueryString() name=eric

Testing ------------------------------------------------------------------------

    Some quick test lines (that pertain to some RemoveIpValve exploration) are
    available in test.sh.

Licensing ----------------------------------------------------------------------

    MIT.  Do as you please, provided adequate attribution where appropriate.

                                                          vim: tw=80 sw=4 et sta
